// Generated by `wit-bindgen` 0.3.0. DO NOT EDIT!

// Ensure that the *_component_type.o object is linked in
#ifdef __wasm32__
extern void __component_type_object_force_link_future_world(void);
void __component_type_object_force_link_future_world_public_use_in_this_compilation_unit(void) {
  __component_type_object_force_link_future_world();
}
#endif
#include "future_world_cpp.h"
#include <cstdlib> // realloc

extern "C" void *cabi_realloc(void *ptr, size_t old_size, size_t align, size_t new_size);

__attribute__((__weak__, __export_name__("cabi_realloc")))
void *cabi_realloc(void *ptr, size_t old_size, size_t align, size_t new_size) {
  (void) old_size;
  if (new_size == 0) return (void*) align;
  void *ret = realloc(ptr, new_size);
  if (!ret) abort();
  return ret;
}


#include "async_support.h"

template <class T>
struct IntLifting {
  static constexpr size_t SIZE = sizeof(T);
  static T lift(uint8_t const*ptr) {
    return *(T const*)ptr;
  }
};

extern "C" uint8_t* testX3AtestX2Ffuture_sourceX00create();
std::future<uint32_t> test::test::future_source::Create()
{
  auto ret = testX3AtestX2Ffuture_sourceX00create();
  return lift_future<uint32_t, IntLifting<uint32_t>>(ret);
}
extern "C" 
uint8_t* testX3AtestX2Ffuture_testX00create()
{
  auto result0 = exports::test::test::future_test::Create();
  return lower_future<uint32_t>(std::move(result0));
}

// Component Adapters
