// Generated by `wit-bindgen` 0.3.0. DO NOT EDIT!
#include "the_world_cpp_native.h"
extern "C"
void fooX3AfooX2FstringsX00a(intptr_t arg0, size_t arg1) {
  auto len0 = arg1;

  foo::foo::strings::A(std::string_view((char const*)(arg0), len0));
}
extern "C"
void fooX3AfooX2FstringsX00b(intptr_t resultptr) {
  auto result0 = foo::foo::strings::B();
  auto const &vec1 = result0;
  auto ptr1 = vec1.data();
  auto len1 = vec1.size();
  *((size_t *)(resultptr + 8)) = len1;
  *((intptr_t *)(resultptr + 0)) = ptr1;
}
extern "C"
void fooX3AfooX2FstringsX00c(intptr_t arg0, size_t arg1, intptr_t arg2,
                             size_t arg3, intptr_t resultptr) {
  auto len0 = arg1;

  auto len1 = arg3;

  auto result2 =
      foo::foo::strings::C(std::string_view((char const*)(arg0), len0),
                                    std::string_view((char const*)(arg2), len1));
  auto const &vec3 = result2;
  auto ptr3 = vec3.data();
  auto len3 = vec3.size();
  *((size_t *)(resultptr + 8)) = len3;
  *((intptr_t *)(resultptr + 0)) = ptr3;
}
extern "C" __attribute__((import_module("foo:foo/strings")))
  __attribute__((import_name("a"))) void fooX3AfooX2FstringsX23a(intptr_t,
                                                                 size_t);
void exports::foo::foo::strings::A(wit::string x) {
  auto const &vec0 = x;
  auto ptr0 = vec0.data();
  auto len0 = vec0.size();
  fooX3AfooX2FstringsX23a(ptr0, len0);
}
extern "C" __attribute__((import_module("foo:foo/strings")))
  __attribute__((import_name("b"))) intptr_t
  fooX3AfooX2FstringsX23b();
extern "C"
__attribute__((__weak__, __export_name__("cabi_post_foo:foo/strings#b"))) void
cabi_post_fooX3AfooX2FstringsX23b(intptr_t arg0);
wit::guest_owned<std::string_view> exports::foo::foo::strings::B() {
  auto ret = fooX3AfooX2FstringsX23b();
  intptr_t l0 = *((intptr_t const *)(ret + 0));
  size_t l1 = *((size_t const *)(ret + 8));
  auto len2 = l1;

  return wit::guest_owned<std::string_view> (std::string_view((char const*)l0, len2), ret, cabi_post_fooX3AfooX2FstringsX23b);
//  wit::string((l0), len2);
}
extern "C"
__attribute__((__weak__, __export_name__("cabi_post_foo:foo/strings#c"))) void
cabi_post_fooX3AfooX2FstringsX23c(intptr_t arg0);
extern "C" __attribute__((import_module("foo:foo/strings")))
  __attribute__((import_name("c")))
  intptr_t fooX3AfooX2FstringsX23c(intptr_t, size_t, intptr_t, size_t);
wit::guest_owned<std::string_view> exports::foo::foo::strings::C(wit::string a, wit::string b) {
  auto const &vec0 = a;
  auto ptr0 = vec0.data();
  auto len0 = vec0.size();
  auto const &vec1 = b;
  auto ptr1 = vec1.data();
  auto len1 = vec1.size();
  auto ret = fooX3AfooX2FstringsX23c(ptr0, len0, ptr1, len1);
  intptr_t l2 = *((intptr_t const *)(ret + 0));
  size_t l3 = *((size_t const *)(ret + 8));
  auto len4 = l3;

  return wit::guest_owned<std::string_view> (std::string_view((char const*)l2, len4), ret, cabi_post_fooX3AfooX2FstringsX23c);
//  return wit::string((char const *)(l2), len4);
}

// Component Adapters
