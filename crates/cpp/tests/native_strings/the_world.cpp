// Generated by `wit-bindgen` 0.3.0. DO NOT EDIT!
#include "the_world_cpp.h"
#include <cstdlib> // realloc

extern "C" void *cabi_realloc(void *ptr, size_t old_size, size_t align,
                              size_t new_size);

__attribute__((__weak__, __export_name__("cabi_realloc"))) void *
cabi_realloc(void *ptr, size_t old_size, size_t align, size_t new_size) {
  (void)old_size;
  if (new_size == 0)
    return (void *)align;
  void *ret = realloc(ptr, new_size);
  if (!ret)
    abort();
  return ret;
}

extern "C" __attribute__((import_module("foo:foo/strings")))
  __attribute__((import_name("a"))) void fooX3AfooX2FstringsX00a(intptr_t,
                                                                 size_t);
void foo::foo::strings::A(std::string_view x) {
  auto const &vec0 = x;
  auto ptr0 = (intptr_t)(vec0.data());
  auto len0 = (size_t)(vec0.size());
  fooX3AfooX2FstringsX00a(ptr0, len0);
}
extern "C" __attribute__((import_module("foo:foo/strings")))
  __attribute__((import_name("b"))) void fooX3AfooX2FstringsX00b(intptr_t);
wit::string foo::foo::strings::B() {
  uintptr_t ret_area[2];
  intptr_t ptr0 = intptr_t(&ret_area);
  fooX3AfooX2FstringsX00b(ptr0);
  intptr_t l1 = *((intptr_t const *)(ptr0 + 0));
  size_t l2 = *((size_t const *)(ptr0 + 8));
  auto len3 = l2;

  return wit::string((char const *)(l1), len3);
}
extern "C" __attribute__((import_module("foo:foo/strings")))
  __attribute__((import_name("c"))) void fooX3AfooX2FstringsX00c(
      intptr_t, size_t, intptr_t, size_t, intptr_t);
wit::string foo::foo::strings::C(std::string_view a, std::string_view b) {
  auto const &vec0 = a;
  auto ptr0 = (intptr_t)(vec0.data());
  auto len0 = (size_t)(vec0.size());
  auto const &vec1 = b;
  auto ptr1 = (intptr_t)(vec1.data());
  auto len1 = (size_t)(vec1.size());
  uintptr_t ret_area[2];
  intptr_t ptr2 = intptr_t(&ret_area);
  fooX3AfooX2FstringsX00c(ptr0, len0, ptr1, len1, ptr2);
  intptr_t l3 = *((intptr_t const *)(ptr2 + 0));
  size_t l4 = *((size_t const *)(ptr2 + 4));
  auto len5 = l4;

  return wit::string((char const *)(l3), len5);
}
extern "C"
__attribute__((__export_name__("foo:foo/strings#a"))) void
fooX3AfooX2FstringsX23a(intptr_t arg0, size_t arg1) {
  auto len0 = arg1;

  exports::foo::foo::strings::A(wit::string((char const *)(arg0), len0));
}
extern "C"
__attribute__((__export_name__("foo:foo/strings#b"))) intptr_t
fooX3AfooX2FstringsX23b() {
  auto result0 = exports::foo::foo::strings::B();
  static uintptr_t ret_area[2];
  intptr_t ptr1 = intptr_t(&ret_area);
  auto const &vec2 = result0;
  auto ptr2 = (intptr_t)(vec2.data());
  auto len2 = (size_t)(vec2.size());
  result0.leak();

  *((size_t *)(ptr1 + 8)) = len2;
  *((intptr_t *)(ptr1 + 0)) = ptr2;
  return ptr1;
}
extern "C"
__attribute__((__weak__, __export_name__("cabi_post_foo:foo/strings#b"))) void
cabi_post_fooX3AfooX2FstringsX23b(intptr_t arg0) {
  intptr_t l0 = *((intptr_t const *)(arg0 + 0));
  size_t l1 = *((size_t const *)(arg0 + 8));
  if ((l1) > 0) {
    wit::string::drop_raw((void *)(l0));
  }
}
extern "C"
__attribute__((__export_name__("foo:foo/strings#c"))) intptr_t
fooX3AfooX2FstringsX23c(intptr_t arg0, size_t arg1, intptr_t arg2,
                        size_t arg3) {
  auto len0 = arg1;

  auto len1 = arg3;

  auto result2 =
      exports::foo::foo::strings::C(wit::string((char const *)(arg0), len0),
                                    wit::string((char const *)(arg2), len1));
  static uintptr_t ret_area[2];
  intptr_t ptr3 = intptr_t(&ret_area);
  auto const &vec4 = result2;
  auto ptr4 = (intptr_t)(vec4.data());
  auto len4 = (size_t)(vec4.size());
  result2.leak();

  *((size_t *)(ptr3 + 8)) = len4;
  *((intptr_t *)(ptr3 + 0)) = ptr4;
  return ptr3;
}
extern "C"
__attribute__((__weak__, __export_name__("cabi_post_foo:foo/strings#c"))) void
cabi_post_fooX3AfooX2FstringsX23c(intptr_t arg0) {
  intptr_t l0 = *((intptr_t const *)(arg0 + 0));
  size_t l1 = *((size_t const *)(arg0 + 8));
  if ((l1) > 0) {
    wit::string::drop_raw((void *)(l0));
  }
}

// Component Adapters
