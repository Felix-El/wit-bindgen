// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
// Options used:
#[allow(dead_code, clippy::all)]
pub mod symmetric {
    pub mod runtime {
        /// This interface will only work with symmetric ABI (shared everything),
        /// it can't be composed with the canonical ABI
        /// Asynchronous executor functionality for symmetric ABI
        #[allow(dead_code, clippy::all)]
        pub mod symmetric_executor {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;

            use super::super::super::_rt;
            /// These pseudo-resources are just used to
            /// pass pointers to register
            /// This wraps a user provided function of type
            /// `fn (callback-data) -> callback-state`

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct CallbackFunction {
                handle: _rt::Resource<CallbackFunction>,
            }

            impl CallbackFunction {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: usize) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> usize {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> usize {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for CallbackFunction {
                #[inline]
                unsafe fn drop(_handle: usize) {
                    {
                        #[link(wasm_import_module = "symmetric:runtime/symmetric-executor@0.1.0")]
                        extern "C" {
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[resource-drop]callback-function"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E1X2E0X00X5Bresource_dropX5Dcallback_function(
                                _: usize,
                            );
                        }

                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E1X2E0X00X5Bresource_dropX5Dcallback_function(_handle);
                    }
                }
            }

            /// This wraps opaque user data, freed by the callback once
            /// it returns ready

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct CallbackData {
                handle: _rt::Resource<CallbackData>,
            }

            impl CallbackData {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: usize) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> usize {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> usize {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for CallbackData {
                #[inline]
                unsafe fn drop(_handle: usize) {
                    {
                        #[link(wasm_import_module = "symmetric:runtime/symmetric-executor@0.1.0")]
                        extern "C" {
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[resource-drop]callback-data"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E1X2E0X00X5Bresource_dropX5Dcallback_data(
                                _: usize,
                            );
                        }

                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E1X2E0X00X5Bresource_dropX5Dcallback_data(_handle);
                    }
                }
            }

            /// The receiving side of an event

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct EventSubscription {
                handle: _rt::Resource<EventSubscription>,
            }

            impl EventSubscription {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: usize) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> usize {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> usize {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for EventSubscription {
                #[inline]
                unsafe fn drop(_handle: usize) {
                    {
                        #[link(wasm_import_module = "symmetric:runtime/symmetric-executor@0.1.0")]
                        extern "C" {
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[resource-drop]event-subscription"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E1X2E0X00X5Bresource_dropX5Devent_subscription(
                                _: usize,
                            );
                        }

                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E1X2E0X00X5Bresource_dropX5Devent_subscription(_handle);
                    }
                }
            }

            /// A user controlled event

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct EventGenerator {
                handle: _rt::Resource<EventGenerator>,
            }

            impl EventGenerator {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: usize) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> usize {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> usize {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for EventGenerator {
                #[inline]
                unsafe fn drop(_handle: usize) {
                    {
                        #[link(wasm_import_module = "symmetric:runtime/symmetric-executor@0.1.0")]
                        extern "C" {
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[resource-drop]event-generator"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E1X2E0X00X5Bresource_dropX5Devent_generator(
                                _: usize,
                            );
                        }

                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E1X2E0X00X5Bresource_dropX5Devent_generator(_handle);
                    }
                }
            }

            /// Return value of an async call, lowest bit encoding
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum CallStatus {
                /// For symmetric this means that processing has started, parameters should still remain valid until null,
                /// params-read = non-null, results-written,done = null
                Started,
                /// For symmetric: Retry the call (temporarily out of memory)
                NotStarted,
            }
            impl ::core::fmt::Debug for CallStatus {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        CallStatus::Started => f.debug_tuple("CallStatus::Started").finish(),
                        CallStatus::NotStarted => f.debug_tuple("CallStatus::NotStarted").finish(),
                    }
                }
            }

            impl CallStatus {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> CallStatus {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => CallStatus::Started,
                        1 => CallStatus::NotStarted,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            /// Return value of an event callback
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum CallbackState {
                /// Call the function again
                Pending,
                /// The function has completed, all results are written, data is freed,
                /// calling the function again is not permitted as data became invalid!
                Ready,
            }
            impl ::core::fmt::Debug for CallbackState {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        CallbackState::Pending => f.debug_tuple("CallbackState::Pending").finish(),
                        CallbackState::Ready => f.debug_tuple("CallbackState::Ready").finish(),
                    }
                }
            }

            impl CallbackState {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> CallbackState {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => CallbackState::Pending,
                        1 => CallbackState::Ready,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            impl EventSubscription {
                #[allow(unused_unsafe, clippy::all)]
                /// Whether the event is active (used by poll implementation)
                pub fn ready(&self) -> bool {
                    unsafe {
                        #[link(wasm_import_module = "symmetric:runtime/symmetric-executor@0.1.0")]
                        extern "C" {
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[method]event-subscription.ready"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E1X2E0X00X5BmethodX5Devent_subscriptionX2Eready(
                                _: *mut u8,
                            ) -> i32;
                        }
                        let ret = symmetricX3AruntimeX2Fsymmetric_executorX400X2E1X2E0X00X5BmethodX5Devent_subscriptionX2Eready((self).handle() as *mut u8);
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl EventSubscription {
                #[allow(unused_unsafe, clippy::all)]
                /// Create a timeout event
                pub fn from_timeout(nanoseconds: u64) -> EventSubscription {
                    unsafe {
                        #[link(wasm_import_module = "symmetric:runtime/symmetric-executor@0.1.0")]
                        extern "C" {
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[static]event-subscription.from-timeout"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E1X2E0X00X5BstaticX5Devent_subscriptionX2Efrom_timeout(
                                _: i64,
                            ) -> *mut u8;
                        }
                        let ret = symmetricX3AruntimeX2Fsymmetric_executorX400X2E1X2E0X00X5BstaticX5Devent_subscriptionX2Efrom_timeout(_rt::as_i64(&nanoseconds));
                        EventSubscription::from_handle(ret as usize)
                    }
                }
            }
            impl EventGenerator {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[link(wasm_import_module = "symmetric:runtime/symmetric-executor@0.1.0")]
                        extern "C" {
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[constructor]event-generator"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E1X2E0X00X5BconstructorX5Devent_generator(
                            ) -> *mut u8;
                        }
                        let ret = symmetricX3AruntimeX2Fsymmetric_executorX400X2E1X2E0X00X5BconstructorX5Devent_generator();
                        EventGenerator::from_handle(ret as usize)
                    }
                }
            }
            impl EventGenerator {
                #[allow(unused_unsafe, clippy::all)]
                /// Get the receiving side (to pass to other parts of the program)
                pub fn subscribe(&self) -> EventSubscription {
                    unsafe {
                        #[link(wasm_import_module = "symmetric:runtime/symmetric-executor@0.1.0")]
                        extern "C" {
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[method]event-generator.subscribe"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E1X2E0X00X5BmethodX5Devent_generatorX2Esubscribe(
                                _: *mut u8,
                            ) -> *mut u8;
                        }
                        let ret = symmetricX3AruntimeX2Fsymmetric_executorX400X2E1X2E0X00X5BmethodX5Devent_generatorX2Esubscribe((self).handle() as *mut u8);
                        EventSubscription::from_handle(ret as usize)
                    }
                }
            }
            impl EventGenerator {
                #[allow(unused_unsafe, clippy::all)]
                /// Trigger all subscribers
                pub fn activate(&self) -> () {
                    unsafe {
                        #[link(wasm_import_module = "symmetric:runtime/symmetric-executor@0.1.0")]
                        #[cfg_attr(not(target_arch = "wasm32"), link(name = "symmetric_executor"))]
                        extern "C" {
                            #[cfg_attr(
                                target_arch = "wasm32",
                                link_name = "[method]event-generator.activate"
                            )]
                            fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E1X2E0X00X5BmethodX5Devent_generatorX2Eactivate(
                                _: *mut u8,
                            );
                        }
                        symmetricX3AruntimeX2Fsymmetric_executorX400X2E1X2E0X00X5BmethodX5Devent_generatorX2Eactivate((self).handle() as *mut u8);
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Wait until all registered events have completed
            pub fn run() -> () {
                unsafe {
                    #[link(wasm_import_module = "symmetric:runtime/symmetric-executor@0.1.0")]
                    extern "C" {
                        #[cfg_attr(target_arch = "wasm32", link_name = "run")]
                        fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E1X2E0X00run();
                    }
                    symmetricX3AruntimeX2Fsymmetric_executorX400X2E1X2E0X00run();
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Register a callback for an event
            pub fn register(
                trigger: EventSubscription,
                callback: CallbackFunction,
                data: CallbackData,
            ) -> () {
                unsafe {
                    #[link(wasm_import_module = "symmetric:runtime/symmetric-executor@0.1.0")]
                    extern "C" {
                        #[cfg_attr(target_arch = "wasm32", link_name = "register")]
                        fn symmetricX3AruntimeX2Fsymmetric_executorX400X2E1X2E0X00register(
                            _: *mut u8,
                            _: *mut u8,
                            _: *mut u8,
                        );
                    }
                    symmetricX3AruntimeX2Fsymmetric_executorX400X2E1X2E0X00register(
                        (&trigger).take_handle() as *mut u8,
                        (&callback).take_handle() as *mut u8,
                        (&data).take_handle() as *mut u8,
                    );
                }
            }
        }
    }
}
mod _rt {
    #![allow(dead_code, clippy::all)]

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicUsize, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `usize` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `0`.
        handle: AtomicUsize,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: usize);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: usize) -> Self {
            debug_assert!(handle != 0);
            Self {
                handle: AtomicUsize::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> usize {
            resource.handle.swap(0, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> usize {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    0 => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }

    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }

    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }

    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }

    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub mod stream_and_future_support {
        use crate as wit_bindgen_symmetric_rt;
        use {
            futures::{
                channel::oneshot,
                future::{self, FutureExt},
                sink::Sink,
                stream::Stream,
            },
            std::{
                collections::hash_map::Entry,
                convert::Infallible,
                fmt,
                future::{Future, IntoFuture},
                iter,
                marker::PhantomData,
                mem::{self, ManuallyDrop, MaybeUninit},
                pin::Pin,
                task::{Context, Poll},
            },
            wit_bindgen_symmetric_rt::async_support::{self, Handle},
        };

        #[doc(hidden)]
        pub trait FuturePayload: Unpin + Sized + 'static {
            fn new() -> u32;
            async fn write(future: u32, value: Self) -> bool;
            async fn read(future: u32) -> Option<Self>;
            fn cancel_write(future: u32);
            fn cancel_read(future: u32);
            fn close_writable(future: u32);
            fn close_readable(future: u32);
        }

        /// Represents the writable end of a Component Model `future`.
        pub struct FutureWriter<T: FuturePayload> {
            handle: u32,
            _phantom: PhantomData<T>,
        }

        impl<T: FuturePayload> fmt::Debug for FutureWriter<T> {
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
                f.debug_struct("FutureWriter")
                    .field("handle", &self.handle)
                    .finish()
            }
        }

        /// Represents a write operation which may be canceled prior to completion.
        pub struct CancelableWrite<T: FuturePayload> {
            writer: Option<FutureWriter<T>>,
            future: Pin<Box<dyn Future<Output = ()>>>,
        }

        impl<T: FuturePayload> Future for CancelableWrite<T> {
            type Output = ();

            fn poll(self: Pin<&mut Self>, cx: &mut Context) -> Poll<()> {
                let me = self.get_mut();
                match me.future.poll_unpin(cx) {
                    Poll::Ready(()) => {
                        me.writer = None;
                        Poll::Ready(())
                    }
                    Poll::Pending => Poll::Pending,
                }
            }
        }

        impl<T: FuturePayload> CancelableWrite<T> {
            /// Cancel this write if it hasn't already completed, returning the original `FutureWriter`.
            ///
            /// This method will panic if the write has already completed.
            pub fn cancel(mut self) -> FutureWriter<T> {
                self.cancel_mut()
            }

            fn cancel_mut(&mut self) -> FutureWriter<T> {
                let writer = self.writer.take().unwrap();
                async_support::with_entry(writer.handle, |entry| match entry {
                    Entry::Vacant(_) => unreachable!(),
                    Entry::Occupied(mut entry) => match entry.get() {
                        Handle::LocalOpen
                        | Handle::LocalWaiting(_)
                        | Handle::Read
                        | Handle::LocalClosed => unreachable!(),
                        Handle::LocalReady(..) => {
                            entry.insert(Handle::LocalOpen);
                        }
                        Handle::Write => T::cancel_write(writer.handle),
                    },
                });
                writer
            }
        }

        impl<T: FuturePayload> Drop for CancelableWrite<T> {
            fn drop(&mut self) {
                if self.writer.is_some() {
                    self.cancel_mut();
                }
            }
        }

        impl<T: FuturePayload> FutureWriter<T> {
            /// Write the specified value to this `future`.
            pub fn write(self, v: T) -> CancelableWrite<T> {
                let handle = self.handle;
                CancelableWrite {
                    writer: Some(self),
                    future: async_support::with_entry(handle, |entry| match entry {
                        Entry::Vacant(_) => unreachable!(),
                        Entry::Occupied(mut entry) => match entry.get() {
                            Handle::LocalOpen => {
                                let mut v = Some(v);
                                Box::pin(future::poll_fn(move |cx| {
                                    async_support::with_entry(handle, |entry| match entry {
                                        Entry::Vacant(_) => unreachable!(),
                                        Entry::Occupied(mut entry) => match entry.get() {
                                            Handle::LocalOpen => {
                                                entry.insert(Handle::LocalReady(
                                                    Box::new(v.take().unwrap()),
                                                    cx.waker().clone(),
                                                ));
                                                Poll::Pending
                                            }
                                            Handle::LocalReady(..) => Poll::Pending,
                                            Handle::LocalClosed => Poll::Ready(()),
                                            Handle::LocalWaiting(_)
                                            | Handle::Read
                                            | Handle::Write => {
                                                unreachable!()
                                            }
                                        },
                                    })
                                }))
                                    as Pin<Box<dyn Future<Output = _>>>
                            }
                            Handle::LocalWaiting(_) => {
                                let Handle::LocalWaiting(tx) = entry.insert(Handle::LocalClosed)
                                else {
                                    unreachable!()
                                };
                                _ = tx.send(Box::new(v));
                                Box::pin(future::ready(()))
                            }
                            Handle::LocalClosed => Box::pin(future::ready(())),
                            Handle::Read | Handle::LocalReady(..) => unreachable!(),
                            Handle::Write => Box::pin(T::write(handle, v).map(drop)),
                        },
                    }),
                }
            }
        }

        impl<T: FuturePayload> Drop for FutureWriter<T> {
            fn drop(&mut self) {
                async_support::with_entry(self.handle, |entry| match entry {
                    Entry::Vacant(_) => unreachable!(),
                    Entry::Occupied(mut entry) => match entry.get_mut() {
                        Handle::LocalOpen | Handle::LocalWaiting(_) | Handle::LocalReady(..) => {
                            entry.insert(Handle::LocalClosed);
                        }
                        Handle::Read => unreachable!(),
                        Handle::Write | Handle::LocalClosed => {
                            entry.remove();
                            T::close_writable(self.handle);
                        }
                    },
                });
            }
        }

        /// Represents a read operation which may be canceled prior to completion.
        pub struct CancelableRead<T: FuturePayload> {
            reader: Option<FutureReader<T>>,
            future: Pin<Box<dyn Future<Output = Option<T>>>>,
        }

        impl<T: FuturePayload> Future for CancelableRead<T> {
            type Output = Option<T>;

            fn poll(self: Pin<&mut Self>, cx: &mut Context) -> Poll<Option<T>> {
                let me = self.get_mut();
                match me.future.poll_unpin(cx) {
                    Poll::Ready(v) => {
                        me.reader = None;
                        Poll::Ready(v)
                    }
                    Poll::Pending => Poll::Pending,
                }
            }
        }

        impl<T: FuturePayload> CancelableRead<T> {
            /// Cancel this read if it hasn't already completed, returning the original `FutureReader`.
            ///
            /// This method will panic if the read has already completed.
            pub fn cancel(mut self) -> FutureReader<T> {
                self.cancel_mut()
            }

            fn cancel_mut(&mut self) -> FutureReader<T> {
                let reader = self.reader.take().unwrap();
                async_support::with_entry(reader.handle, |entry| match entry {
                    Entry::Vacant(_) => unreachable!(),
                    Entry::Occupied(mut entry) => match entry.get() {
                        Handle::LocalOpen
                        | Handle::LocalReady(..)
                        | Handle::Write
                        | Handle::LocalClosed => unreachable!(),
                        Handle::LocalWaiting(_) => {
                            entry.insert(Handle::LocalOpen);
                        }
                        Handle::Read => T::cancel_read(reader.handle),
                    },
                });
                reader
            }
        }

        impl<T: FuturePayload> Drop for CancelableRead<T> {
            fn drop(&mut self) {
                if self.reader.is_some() {
                    self.cancel_mut();
                }
            }
        }

        /// Represents the readable end of a Component Model `future`.
        pub struct FutureReader<T: FuturePayload> {
            handle: u32,
            _phantom: PhantomData<T>,
        }

        impl<T: FuturePayload> fmt::Debug for FutureReader<T> {
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
                f.debug_struct("FutureReader")
                    .field("handle", &self.handle)
                    .finish()
            }
        }

        impl<T: FuturePayload> FutureReader<T> {
            #[doc(hidden)]
            pub fn from_handle(handle: u32) -> Self {
                async_support::with_entry(handle, |entry| match entry {
                    Entry::Vacant(entry) => {
                        entry.insert(Handle::Read);
                    }
                    Entry::Occupied(mut entry) => match entry.get() {
                        Handle::Write => {
                            entry.insert(Handle::LocalOpen);
                        }
                        Handle::Read
                        | Handle::LocalOpen
                        | Handle::LocalReady(..)
                        | Handle::LocalWaiting(_)
                        | Handle::LocalClosed => {
                            unreachable!()
                        }
                    },
                });

                Self {
                    handle,
                    _phantom: PhantomData,
                }
            }

            #[doc(hidden)]
            pub fn into_handle(self) -> u32 {
                async_support::with_entry(self.handle, |entry| match entry {
                    Entry::Vacant(_) => unreachable!(),
                    Entry::Occupied(mut entry) => match entry.get() {
                        Handle::LocalOpen => {
                            entry.insert(Handle::Write);
                        }
                        Handle::Read | Handle::LocalClosed => {
                            entry.remove();
                        }
                        Handle::LocalReady(..) | Handle::LocalWaiting(_) | Handle::Write => {
                            unreachable!()
                        }
                    },
                });

                ManuallyDrop::new(self).handle
            }
        }

        impl<T: FuturePayload> IntoFuture for FutureReader<T> {
            type Output = Option<T>;
            type IntoFuture = CancelableRead<T>;

            /// Convert this object into a `Future` which will resolve when a value is
            /// written to the writable end of this `future` (yielding a `Some` result)
            /// or when the writable end is dropped (yielding a `None` result).
            fn into_future(self) -> Self::IntoFuture {
                let handle = self.handle;
                CancelableRead {
                    reader: Some(self),
                    future: async_support::with_entry(handle, |entry| match entry {
                        Entry::Vacant(_) => unreachable!(),
                        Entry::Occupied(mut entry) => match entry.get() {
                            Handle::Write | Handle::LocalWaiting(_) => unreachable!(),
                            Handle::Read => Box::pin(async move { T::read(handle).await })
                                as Pin<Box<dyn Future<Output = _>>>,
                            Handle::LocalOpen => {
                                let (tx, rx) = oneshot::channel();
                                entry.insert(Handle::LocalWaiting(tx));
                                Box::pin(
                                    async move { rx.await.ok().map(|v| *v.downcast().unwrap()) },
                                )
                            }
                            Handle::LocalClosed => Box::pin(future::ready(None)),
                            Handle::LocalReady(..) => {
                                let Handle::LocalReady(v, waker) =
                                    entry.insert(Handle::LocalClosed)
                                else {
                                    unreachable!()
                                };
                                waker.wake();
                                Box::pin(future::ready(Some(*v.downcast().unwrap())))
                            }
                        },
                    }),
                }
            }
        }

        impl<T: FuturePayload> Drop for FutureReader<T> {
            fn drop(&mut self) {
                async_support::with_entry(self.handle, |entry| match entry {
                    Entry::Vacant(_) => unreachable!(),
                    Entry::Occupied(mut entry) => match entry.get_mut() {
                        Handle::LocalReady(..) => {
                            let Handle::LocalReady(_, waker) = entry.insert(Handle::LocalClosed)
                            else {
                                unreachable!()
                            };
                            waker.wake();
                        }
                        Handle::LocalOpen | Handle::LocalWaiting(_) => {
                            entry.insert(Handle::LocalClosed);
                        }
                        Handle::Read | Handle::LocalClosed => {
                            entry.remove();
                            T::close_readable(self.handle);
                        }
                        Handle::Write => unreachable!(),
                    },
                });
            }
        }

        #[doc(hidden)]
        pub trait StreamPayload: Unpin + Sized + 'static {
            fn new() -> u32;
            async fn write(stream: u32, values: &[Self]) -> Option<usize>;
            async fn read(stream: u32, values: &mut [MaybeUninit<Self>]) -> Option<usize>;
            fn cancel_write(stream: u32);
            fn cancel_read(stream: u32);
            fn close_writable(stream: u32);
            fn close_readable(stream: u32);
        }

        struct CancelWriteOnDrop<T: StreamPayload> {
            handle: Option<u32>,
            _phantom: PhantomData<T>,
        }

        impl<T: StreamPayload> Drop for CancelWriteOnDrop<T> {
            fn drop(&mut self) {
                if let Some(handle) = self.handle.take() {
                    async_support::with_entry(handle, |entry| match entry {
                        Entry::Vacant(_) => unreachable!(),
                        Entry::Occupied(mut entry) => match entry.get() {
                            Handle::LocalOpen
                            | Handle::LocalWaiting(_)
                            | Handle::Read
                            | Handle::LocalClosed => unreachable!(),
                            Handle::LocalReady(..) => {
                                entry.insert(Handle::LocalOpen);
                            }
                            Handle::Write => T::cancel_write(handle),
                        },
                    });
                }
            }
        }

        /// Represents the writable end of a Component Model `stream`.
        pub struct StreamWriter<T: StreamPayload> {
            handle: u32,
            future: Option<Pin<Box<dyn Future<Output = ()> + 'static>>>,
            _phantom: PhantomData<T>,
        }

        impl<T: StreamPayload> StreamWriter<T> {
            /// Cancel the current pending write operation.
            ///
            /// This will panic if no such operation is pending.
            pub fn cancel(&mut self) {
                assert!(self.future.is_some());
                self.future = None;
            }
        }

        impl<T: StreamPayload> fmt::Debug for StreamWriter<T> {
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
                f.debug_struct("StreamWriter")
                    .field("handle", &self.handle)
                    .finish()
            }
        }

        impl<T: StreamPayload> Sink<Vec<T>> for StreamWriter<T> {
            type Error = Infallible;

            fn poll_ready(self: Pin<&mut Self>, cx: &mut Context) -> Poll<Result<(), Self::Error>> {
                let me = self.get_mut();

                if let Some(future) = &mut me.future {
                    match future.as_mut().poll(cx) {
                        Poll::Ready(_) => {
                            me.future = None;
                            Poll::Ready(Ok(()))
                        }
                        Poll::Pending => Poll::Pending,
                    }
                } else {
                    Poll::Ready(Ok(()))
                }
            }

            fn start_send(self: Pin<&mut Self>, item: Vec<T>) -> Result<(), Self::Error> {
                assert!(self.future.is_none());
                async_support::with_entry(self.handle, |entry| match entry {
                    Entry::Vacant(_) => unreachable!(),
                    Entry::Occupied(mut entry) => match entry.get() {
                        Handle::LocalOpen => {
                            let handle = self.handle;
                            let mut item = Some(item);
                            let mut cancel_on_drop = Some(CancelWriteOnDrop::<T> {
                                handle: Some(handle),
                                _phantom: PhantomData,
                            });
                            self.get_mut().future = Some(Box::pin(future::poll_fn(move |cx| {
                                async_support::with_entry(handle, |entry| match entry {
                                    Entry::Vacant(_) => unreachable!(),
                                    Entry::Occupied(mut entry) => match entry.get() {
                                        Handle::LocalOpen => {
                                            if let Some(item) = item.take() {
                                                entry.insert(Handle::LocalReady(
                                                    Box::new(item),
                                                    cx.waker().clone(),
                                                ));
                                                Poll::Pending
                                            } else {
                                                cancel_on_drop.take().unwrap().handle = None;
                                                Poll::Ready(())
                                            }
                                        }
                                        Handle::LocalReady(..) => Poll::Pending,
                                        Handle::LocalClosed => {
                                            cancel_on_drop.take().unwrap().handle = None;
                                            Poll::Ready(())
                                        }
                                        Handle::LocalWaiting(_) | Handle::Read | Handle::Write => {
                                            unreachable!()
                                        }
                                    },
                                })
                            })));
                        }
                        Handle::LocalWaiting(_) => {
                            let Handle::LocalWaiting(tx) = entry.insert(Handle::LocalOpen) else {
                                unreachable!()
                            };
                            _ = tx.send(Box::new(item));
                        }
                        Handle::LocalClosed => (),
                        Handle::Read | Handle::LocalReady(..) => unreachable!(),
                        Handle::Write => {
                            let handle = self.handle;
                            let mut cancel_on_drop = CancelWriteOnDrop::<T> {
                                handle: Some(handle),
                                _phantom: PhantomData,
                            };
                            self.get_mut().future = Some(Box::pin(async move {
                                let mut offset = 0;
                                while offset < item.len() {
                                    if let Some(count) = T::write(handle, &item[offset..]).await {
                                        offset += count;
                                    } else {
                                        break;
                                    }
                                }
                                cancel_on_drop.handle = None;
                                drop(cancel_on_drop);
                            }));
                        }
                    },
                });
                Ok(())
            }

            fn poll_flush(self: Pin<&mut Self>, cx: &mut Context) -> Poll<Result<(), Self::Error>> {
                self.poll_ready(cx)
            }

            fn poll_close(self: Pin<&mut Self>, cx: &mut Context) -> Poll<Result<(), Self::Error>> {
                self.poll_ready(cx)
            }
        }

        impl<T: StreamPayload> Drop for StreamWriter<T> {
            fn drop(&mut self) {
                self.future = None;

                async_support::with_entry(self.handle, |entry| match entry {
                    Entry::Vacant(_) => unreachable!(),
                    Entry::Occupied(mut entry) => match entry.get_mut() {
                        Handle::LocalOpen | Handle::LocalWaiting(_) | Handle::LocalReady(..) => {
                            entry.insert(Handle::LocalClosed);
                        }
                        Handle::Read => unreachable!(),
                        Handle::Write | Handle::LocalClosed => {
                            entry.remove();
                            T::close_writable(self.handle);
                        }
                    },
                });
            }
        }

        struct CancelReadOnDrop<T: StreamPayload> {
            handle: Option<u32>,
            _phantom: PhantomData<T>,
        }

        impl<T: StreamPayload> Drop for CancelReadOnDrop<T> {
            fn drop(&mut self) {
                if let Some(handle) = self.handle.take() {
                    async_support::with_entry(handle, |entry| match entry {
                        Entry::Vacant(_) => unreachable!(),
                        Entry::Occupied(mut entry) => match entry.get() {
                            Handle::LocalOpen
                            | Handle::LocalReady(..)
                            | Handle::Write
                            | Handle::LocalClosed => unreachable!(),
                            Handle::LocalWaiting(_) => {
                                entry.insert(Handle::LocalOpen);
                            }
                            Handle::Read => T::cancel_read(handle),
                        },
                    });
                }
            }
        }

        /// Represents the readable end of a Component Model `stream`.
        pub struct StreamReader<T: StreamPayload> {
            handle: u32,
            future: Option<Pin<Box<dyn Future<Output = Option<Vec<T>>> + 'static>>>,
            _phantom: PhantomData<T>,
        }

        impl<T: StreamPayload> StreamReader<T> {
            /// Cancel the current pending read operation.
            ///
            /// This will panic if no such operation is pending.
            pub fn cancel(&mut self) {
                assert!(self.future.is_some());
                self.future = None;
            }
        }

        impl<T: StreamPayload> fmt::Debug for StreamReader<T> {
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
                f.debug_struct("StreamReader")
                    .field("handle", &self.handle)
                    .finish()
            }
        }

        impl<T: StreamPayload> StreamReader<T> {
            #[doc(hidden)]
            pub fn from_handle(handle: u32) -> Self {
                async_support::with_entry(handle, |entry| match entry {
                    Entry::Vacant(entry) => {
                        entry.insert(Handle::Read);
                    }
                    Entry::Occupied(mut entry) => match entry.get() {
                        Handle::Write => {
                            entry.insert(Handle::LocalOpen);
                        }
                        Handle::Read
                        | Handle::LocalOpen
                        | Handle::LocalReady(..)
                        | Handle::LocalWaiting(_)
                        | Handle::LocalClosed => {
                            unreachable!()
                        }
                    },
                });

                Self {
                    handle,
                    future: None,
                    _phantom: PhantomData,
                }
            }

            #[doc(hidden)]
            pub fn into_handle(self) -> u32 {
                async_support::with_entry(self.handle, |entry| match entry {
                    Entry::Vacant(_) => unreachable!(),
                    Entry::Occupied(mut entry) => match entry.get() {
                        Handle::LocalOpen => {
                            entry.insert(Handle::Write);
                        }
                        Handle::Read | Handle::LocalClosed => {
                            entry.remove();
                        }
                        Handle::LocalReady(..) | Handle::LocalWaiting(_) | Handle::Write => {
                            unreachable!()
                        }
                    },
                });

                ManuallyDrop::new(self).handle
            }
        }

        impl<T: StreamPayload> Stream for StreamReader<T> {
            type Item = Vec<T>;

            fn poll_next(self: Pin<&mut Self>, cx: &mut Context) -> Poll<Option<Self::Item>> {
                let me = self.get_mut();

                if me.future.is_none() {
                    me.future = Some(async_support::with_entry(me.handle, |entry| match entry {
                        Entry::Vacant(_) => unreachable!(),
                        Entry::Occupied(mut entry) => match entry.get() {
                            Handle::Write | Handle::LocalWaiting(_) => unreachable!(),
                            Handle::Read => {
                                let handle = me.handle;
                                let mut cancel_on_drop = CancelReadOnDrop::<T> {
                                    handle: Some(handle),
                                    _phantom: PhantomData,
                                };
                                Box::pin(async move {
                                    let mut buffer = iter::repeat_with(MaybeUninit::uninit)
                                        .take(ceiling(64 * 1024, mem::size_of::<T>()))
                                        .collect::<Vec<_>>();

                                    let result = if let Some(count) =
                                        T::read(handle, &mut buffer).await
                                    {
                                        buffer.truncate(count);
                                        Some(unsafe {
                                            mem::transmute::<Vec<MaybeUninit<T>>, Vec<T>>(buffer)
                                        })
                                    } else {
                                        None
                                    };
                                    cancel_on_drop.handle = None;
                                    drop(cancel_on_drop);
                                    result
                                })
                                    as Pin<Box<dyn Future<Output = _>>>
                            }
                            Handle::LocalOpen => {
                                let (tx, rx) = oneshot::channel();
                                entry.insert(Handle::LocalWaiting(tx));
                                let mut cancel_on_drop = CancelReadOnDrop::<T> {
                                    handle: Some(me.handle),
                                    _phantom: PhantomData,
                                };
                                Box::pin(async move {
                                    let result =
                                        rx.map(|v| v.ok().map(|v| *v.downcast().unwrap())).await;
                                    cancel_on_drop.handle = None;
                                    drop(cancel_on_drop);
                                    result
                                })
                            }
                            Handle::LocalClosed => Box::pin(future::ready(None)),
                            Handle::LocalReady(..) => {
                                let Handle::LocalReady(v, waker) = entry.insert(Handle::LocalOpen)
                                else {
                                    unreachable!()
                                };
                                waker.wake();
                                Box::pin(future::ready(Some(*v.downcast().unwrap())))
                            }
                        },
                    }));
                }

                match me.future.as_mut().unwrap().as_mut().poll(cx) {
                    Poll::Ready(v) => {
                        me.future = None;
                        Poll::Ready(v)
                    }
                    Poll::Pending => Poll::Pending,
                }
            }
        }

        impl<T: StreamPayload> Drop for StreamReader<T> {
            fn drop(&mut self) {
                self.future = None;

                async_support::with_entry(self.handle, |entry| match entry {
                    Entry::Vacant(_) => unreachable!(),
                    Entry::Occupied(mut entry) => match entry.get_mut() {
                        Handle::LocalReady(..) => {
                            let Handle::LocalReady(_, waker) = entry.insert(Handle::LocalClosed)
                            else {
                                unreachable!()
                            };
                            waker.wake();
                        }
                        Handle::LocalOpen | Handle::LocalWaiting(_) => {
                            entry.insert(Handle::LocalClosed);
                        }
                        Handle::Read | Handle::LocalClosed => {
                            entry.remove();
                            T::close_readable(self.handle);
                        }
                        Handle::Write => unreachable!(),
                    },
                });
            }
        }

        /// Creates a new Component Model `future` with the specified payload type.
        pub fn new_future<T: FuturePayload>() -> (FutureWriter<T>, FutureReader<T>) {
            let handle = T::new();
            async_support::with_entry(handle, |entry| match entry {
                Entry::Vacant(entry) => {
                    entry.insert(Handle::LocalOpen);
                }
                Entry::Occupied(_) => unreachable!(),
            });
            (
                FutureWriter {
                    handle,
                    _phantom: PhantomData,
                },
                FutureReader {
                    handle,
                    _phantom: PhantomData,
                },
            )
        }

        /// Creates a new Component Model `stream` with the specified payload type.
        pub fn new_stream<T: StreamPayload>() -> (StreamWriter<T>, StreamReader<T>) {
            let handle = T::new();
            async_support::with_entry(handle, |entry| match entry {
                Entry::Vacant(entry) => {
                    entry.insert(Handle::LocalOpen);
                }
                Entry::Occupied(_) => unreachable!(),
            });
            (
                StreamWriter {
                    handle,
                    future: None,
                    _phantom: PhantomData,
                },
                StreamReader {
                    handle,
                    future: None,
                    _phantom: PhantomData,
                },
            )
        }

        fn ceiling(x: usize, y: usize) -> usize {
            (x / y) + if x % y == 0 { 0 } else { 1 }
        }
    }
}
#[allow(unused_imports)]
pub use _rt::stream_and_future_support;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.36.0:symmetric:runtime@0.1.0:module:encoded world"]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 695] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xba\x04\x01A\x02\x01\
A\x02\x01B\x1c\x04\0\x11callback-function\x03\x01\x04\0\x0dcallback-data\x03\x01\
\x04\0\x12event-subscription\x03\x01\x04\0\x0fevent-generator\x03\x01\x01m\x02\x07\
started\x0bnot-started\x04\0\x0bcall-status\x03\0\x04\x01m\x02\x07pending\x05rea\
dy\x04\0\x0ecallback-state\x03\0\x06\x01h\x02\x01@\x01\x04self\x08\0\x7f\x04\0\x20\
[method]event-subscription.ready\x01\x09\x01i\x02\x01@\x01\x0bnanosecondsw\0\x0a\
\x04\0'[static]event-subscription.from-timeout\x01\x0b\x01i\x03\x01@\0\0\x0c\x04\
\0\x1c[constructor]event-generator\x01\x0d\x01h\x03\x01@\x01\x04self\x0e\0\x0a\x04\
\0![method]event-generator.subscribe\x01\x0f\x01@\x01\x04self\x0e\x01\0\x04\0\x20\
[method]event-generator.activate\x01\x10\x01@\0\x01\0\x04\0\x03run\x01\x11\x01i\0\
\x01i\x01\x01@\x03\x07trigger\x0a\x08callback\x12\x04data\x13\x01\0\x04\0\x08reg\
ister\x01\x14\x03\0*symmetric:runtime/symmetric-executor@0.1.0\x05\0\x04\0\x1esy\
mmetric:runtime/module@0.1.0\x04\0\x0b\x0c\x01\0\x06module\x03\0\0\0G\x09produce\
rs\x01\x0cprocessed-by\x02\x0dwit-component\x070.221.2\x10wit-bindgen-rust\x060.\
36.0";

#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen::rt::maybe_link_cabi_realloc();
}
